#include <stdio.h>
#include <stdlib.h>
struct Edge {
    int src, dest, weight;
};
int compareEdges(const void *a, const void *b) {
    return ((struct Edge *)a)->weight - ((struct Edge *)b)->weight;
}
int findParent(int parent[], int i) {
    if (parent[i] == -1)
        return i;
    return findParent(parent, parent[i]);
}
void unionSets(int parent[], int x, int y) {
    int xRoot = findParent(parent, x);
    int yRoot = findParent(parent, y);
    parent[xRoot] = yRoot;
}
void kruskalMST(struct Edge edges[], int V, int E) {
    qsort(edges, E, sizeof(edges[0]), compareEdges);
    int *parent = (int *)malloc(V * sizeof(int));
    for (int i = 0; i < V; i++)
        parent[i] = -1;
    printf("Minimum Spanning Tree:\n");
    for (int i = 0; i < E; i++) {
        int srcParent = findParent(parent, edges[i].src);
        int destParent = findParent(parent, edges[i].dest);
        if (srcParent != destParent) {
            printf("%d - %d : %d\n", edges[i].src, edges[i].dest, edges[i].weight);
            unionSets(parent, srcParent, destParent);
        }
    }
    free(parent);
}
int main() {
    int V, E;
    printf("Enter the number of vertices and edges: ");
    scanf("%d %d", &V, &E);
    struct Edge *edges = (struct Edge *)malloc(E * sizeof(struct Edge));
    for (int i = 0; i < E; i++) {
        printf("Enter source, destination, and weight of edge %d: ", i + 1);
        scanf("%d %d %d", &edges[i].src, &edges[i].dest, &edges[i].weight);
    }
    kruskalMST(edges, V, E);
    free(edges);
    return 0;
}
