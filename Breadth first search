#include <stdio.h>
#include <stdlib.h>
struct Queue {
    int front, rear, size;
    unsigned capacity;
    int* array;
};
struct Queue* createQueue(unsigned capacity) {
    struct Queue* queue = (struct Queue*)malloc(sizeof(struct Queue));
    queue->capacity = capacity;
    queue->front = queue->size = 0;
    queue->rear = capacity - 1;
    queue->array = (int*)malloc(queue->capacity * sizeof(int));
    return queue;
}
int isQueueFull(struct Queue* queue) {
    return (queue->size == queue->capacity);
}
int isQueueEmpty(struct Queue* queue) {
    return (queue->size == 0);
}
void enqueue(struct Queue* queue, int item) {
    if (isQueueFull(queue))
        return;
    queue->rear = (queue->rear + 1) % queue->capacity;
    queue->array[queue->rear] = item;
    queue->size++;
}
int dequeue(struct Queue* queue) {
    if (isQueueEmpty(queue))
        return -1;
    int item = queue->array[queue->front];
    queue->front = (queue->front + 1) % queue->capacity;
    queue->size--;
    return item;
}
void bfs(int adjacencyMatrix[][100], int vertices, int startVertex) {
    int visited[vertices];
    for (int i = 0; i < vertices; i++)
        visited[i] = 0;
    struct Queue* queue = createQueue(vertices);
    visited[startVertex] = 1;
    enqueue(queue, startVertex);
    printf("Breadth-First Traversal starting from vertex %d: ", startVertex);
    while (!isQueueEmpty(queue)) {
        int currentVertex = dequeue(queue);
        printf("%d ", currentVertex);
        for (int i = 0; i < vertices; i++) {
            if (adjacencyMatrix[currentVertex][i] && !visited[i]) {
                visited[i] = 1;
                enqueue(queue, i);
            }
        }
    }
    free(queue);
}
int main() {
    int vertices;
    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);
    int adjacencyMatrix[100][100];
    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < vertices; i++) {
        for (int j = 0; j < vertices; j++) {
            scanf("%d", &adjacencyMatrix[i][j]);
        }
    }
    int startVertex;
    printf("Enter the starting vertex: ");
    scanf("%d", &startVertex);
    bfs(adjacencyMatrix, vertices, startVertex);
    return 0;
}
